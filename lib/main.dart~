import 'dart:async';
import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';

import 'src/a.dart';

/// Set to true to terminate the process after printing the stack.
/// This ensures you get a "real crash" while still having the Dart stack
/// in logcat for symbolization.
const bool hardCrash = true;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Print framework errors; optionally terminate.
  FlutterError.onError = (details) {
    FlutterError.dumpErrorToConsole(details, forceReport: true);
    if (hardCrash) {
      // Give the log a brief moment to flush, then exit the process.
      Future<void>.delayed(const Duration(milliseconds: 10), () => exit(1));
    }
  };

  // Print uncaught async errors; optionally terminate.
  PlatformDispatcher.instance.onError = (error, stack) {
    FlutterError.dumpErrorToConsole(
      FlutterErrorDetails(exception: error, stack: stack),
      forceReport: true,
    );
    if (hardCrash) {
      Future<void>.delayed(const Duration(milliseconds: 10), () => exit(1));
    }
    // Return true to avoid double-reporting; we're exiting anyway if hardCrash.
    return true;
  };

  runApp(const MyApp());

  // Trigger a deterministic throw shortly after first frame.
  //WidgetsBinding.instance.addPostFrameCallback((_) async {
  //  await Future<void>.delayed(const Duration(seconds: 1));
  //  entryPointA(); // This will throw in b.dart with a unique marker.
  //});
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Throwing App (Pure)',
      home: Scaffold(
        appBar: AppBar(title: const Text('Throwing App (Pure)')),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'This app intentionally throws to test Flutter symbolization for APK vs AAB builds.',
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: entryPointA,
                child: const Text('Throw uncaught Dart exception (multi-file chain)'),
              ),
              const SizedBox(height: 12),
              ElevatedButton(
                onPressed: () async {
                  await Future<void>.delayed(const Duration(milliseconds: 100));
                  entryPointA();
                },
                child: const Text('Throw (delayed)'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
